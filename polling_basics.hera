
// always increment r3; increment r1 if button1 is pressed, r2 if button2 is pressed
// in the starter files, the buttons are "simulated" by reading 0's and 1's from arrays

// set up fake input
//SET(R4, mmap_placeholder)
//SET(R5, in_op_placeholder)
//SET(R4, mmap_placeholder)
//SET(R5, in_op_placeholder)
SETLO(R6, 0) // offset into fake arrays
SETLO(R7, 0x07)  // 0000 0111, after "and", tells us if we've reached a multiple of 8, reset "offset" each time
SET(R3, 0xff00)  // only run 0x100 times

LABEL(main_loop)
SET(R8, 0xfff0) // setting R8 to location 0xfff0
LOAD(Rt, 0, R8) //Loading R8 into Rt
CMP(Rt, R0) //if there is a load, we can increment the button. If not, we don't press the button
BZ(button1_not_pressed)
INC(R1, 1)
LABEL(button1_not_pressed)

OPCODE(0x2CC0) //opcode for the special instruction which has been placed in R12.
CMP(R12, R0) //Checking if the special instruction is being accessed(is the button being pressed)
BZ(button2_not_pressed)
INC(R2, 1) //if it is, we increment the counter. if not we don't
LABEL(button2_not_pressed)

INC(R6, 1) // increment array offset; this can be removed later
AND(R6, R6,R7) // restrict to 0..7

//print(" ")    // the output will be automatically visible in hardware, but print, here
//print_reg(R1)
//print_reg(R2)
//print_reg(R3)

INC(R3, 1)
BNZ(main_loop)
//print("that's all, folks")
